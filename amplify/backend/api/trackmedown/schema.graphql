type FileUpload {
  name: String
  path: String!
  type: String
}

type Payment @model @auth(rules: [{allow: public}]) {
  id: ID!
  totalAmount: Float
  datePaid: AWSDateTime
  passenger: Passenger @hasOne
  tripCharge: TripCharge @hasOne
  driver: Driver @hasOne
}

type DirectDeposit @model @auth(rules: [{allow: public}]) {
  id: ID!
  routingNumber: String
  accountNumber: String
  amountDesignated: String
  percentageDesignated: String
  driver: Driver @hasOne
}

enum TripUrgency {
  NOW
  ASAP
  REGULAR
  SCHEDULED
}

type VehicleFleet @model @auth(rules: [{allow: public}]) {
  id: ID!
  fleetTitle: String
  vehicles: [Vehicle] @hasMany(indexName: "byVehicleFleet", fields: ["id"])
}

type DriverPool @model @auth(rules: [{allow: public}]) {
  id: ID!
  poolName: String!
  drivers: [Driver] @hasMany(indexName: "byDriverPool", fields: ["id"])
}

type Notification @model @auth(rules: [{allow: public}]) {
  id: ID!
  event: String
  message: String
  time: AWSDateTime
  target: String
}

type IntRange {
  min: Int
  max: Int
}

type DriverRating @model @auth(rules: [{allow: public}]) {
  id: ID!
  cleanliness: IntRange!
  punctuality: IntRange!
  safety: IntRange!
  courtesy: IntRange!
  satisfaction: String!
  comments: String!
  driver: Driver @hasOne
  passenger: Passenger @hasOne
  tripSummary: TripSummary @hasOne
}

type Administrator @model @auth(rules: [{allow: public}]) {
  id: ID!
  firstName: String!
  lastName: String!
  phoneNumber: AWSPhone!
  emailAddress: String!
  copyOfId: FileUpload
  homeAddress: PhysicalAddress @hasOne
  dateRegistered: AWSDate
}

type GeoFence @model @auth(rules: [{allow: public}]) {
  id: ID!
  title: String
  coordinates: String!
  dateCreated: AWSDate
  validDuration: IntRange
}

enum DriverStatus {
  PENDING
  ACTIVE
  SUSPENDED
  BANNED
}

enum EarningTier {
  ENTRY
  EXPERIENCED
  SILVER
  GOLD
  PLATINUM
}

type Driver @model @auth(rules: [{allow: public}]) {
  id: ID!
  firstName: String!
  lastName: String!
  ssn: String!
  dob: AWSDate!
  dLCopy: FileUpload!
  phoneNumber: AWSPhone
  emailAddress: AWSEmail
  homeAddress: PhysicalAddress @hasOne
  earningTier: EarningTier
  registrationDate: AWSDate
  activeStatus: DriverStatus
  driverpoolID: ID @index(name: "byDriverPool")
}

type Vehicle @model @auth(rules: [{allow: public}]) {
  id: ID!
  vin: String!
  make: String!
  model: String!
  year: IntRange!
  registrationNum: String
  registrationState: String
  registrationDocs: FileUpload!
  insuranceProof: FileUpload!
  vehiclefleetID: ID @index(name: "byVehicleFleet")
  driver: Driver @hasOne
}

type PhysicalAddress @model @auth(rules: [{allow: public}]) {
  id: ID!
  streetName: String!
  unitNumber: String
  city: String!
  state: String!
  zipCode: String!
}

enum TripStatus {
  REQUESTED
  STARTED
  COMPLETED
  CANCELLED
}

type TripSummary @model @auth(rules: [{allow: public}]) {
  id: ID!
  pathTravelled: [GeoLocation]!
  totalDistance: Float!
  cancellationCharge: Float
  tripStatus: TripStatus!
  timeCompleted: AWSDateTime!
  tripPlan: TripPlan @hasOne
  totalCharge: Float
}

type TripCharge @model @auth(rules: [{allow: public}]) {
  id: ID!
  cost: Float!
  tip: Float
  passenger: Passenger @hasOne
  tripSummary: TripSummary @hasOne
}

type GeoLocation {
  longitude: Float
  latitude: Float
}

type TripPlan @model @auth(rules: [{allow: public}]) {
  id: ID!
  pickUpTime: AWSDateTime!
  pickUpLocation: GeoLocation!
  dropOffLocation: GeoLocation!
  urgency: TripUrgency!
  passenger: Passenger @hasOne
}

enum PaymentType {
  CREDITCARD
  DEBITCARD
  PAYPAL
  STRIPE
}

type PaymentMethod @model @auth(rules: [{allow: public}]) {
  id: ID!
  paymentType: PaymentType!
  accountNumber: String!
  firstName: String!
  lastName: String!
  expiryDate: AWSDate!
  verificationCode: Int!
}

enum PassengerStatus {
  UNVERIFIED
  ACTIVATED
  PASSIVATED
  BANNED
}

type Passenger @model @auth(rules: [{allow: public}]) {
  id: ID!
  firstName: String!
  lastName: String!
  phoneNumber: AWSPhone!
  emailAddress: AWSEmail!
  dateRegistered: AWSDate
  activeStatus: PassengerStatus
  paymentMethod: PaymentMethod @hasOne
}
 